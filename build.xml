<?xml version="1.0" encoding="UTF-8"?>
<project name="Koopa" default="build" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

	<property name="koopa.java.version" value="1.8" />

	<!-- Thank you: http://stackoverflow.com/questions/7260697/set-ant-bootclasspath-jdk-1-7-has-a-new-javac-warning-for-setting-an-older-sour -->
	<property environment="env" />
	<property name="koopa.java.boot.classpath" value="${env.JAVA8_BOOTCLASSES}" />
	<echo unless:set="env.JAVA8_BOOTCLASSES">
        Please make sure JAVA8_BOOTCLASSES is set to a valid Java ${koopa.java.version} bootstrap classpath.
        You may get builds which are not compatible with Java ${koopa.java.version} otherwise.
    </echo>

    <condition property="koopa.revision" value="${env.KOOPA_REVISION}" else="unknown">
        <isset property="env.KOOPA_REVISION" />
    </condition>

	<target name="clean">
		<delete dir="doc/javadoc/" />
		<delete dir="build/" />
	</target>

	<target name="build" depends="clean,core,core-tests,dsl,dsl-tests,cics,cics-tests,sql,sql-tests,cobol,cobol-tests,apps,examples,report-java-version">
		<!-- Include all readme's in the output. -->
		<copy todir="build/">
			<fileset dir="." includes="*.md" />
		</copy>
	</target>

	<target name="run-tests" depends="run-core-tests,run-dsl-tests,run-cics-tests,run-sql-tests,run-cobol-tests,run-cobol-regression-tests">
	</target>

	<!-- CORE / ISLAND PARSER GENERATOR -->

	<target name="core" depends="core-compile">
	</target>

	<target name="core-build">
		<mkdir dir="build/" />
	</target>

	<target name="core-compile" depends="core-build,revision-number">
		<echo>Compiling Koopa's core...</echo>
		<javac srcdir="src/core/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/core/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- CORE TESTS -->

	<target name="core-tests" depends="core">
		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/core/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/core/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-core-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.core.data.test.PositionTest" />
			<test name="koopa.core.data.test.TokenTest" />
			<test name="koopa.core.data.test.TokensTest" />

			<test name="koopa.core.parsers.test.ParseStackTest" />
			<test name="koopa.core.streams.test.BaseStreamTest" />
			<test name="koopa.core.streams.test.LimitedStreamTest" />

			<test name="koopa.core.grammars.test.KoopaGrammarTest" />
			<test name="koopa.core.grammars.test.AutomaticKeywordsTest" />
			<test name="koopa.core.grammars.test.DecimalGrammarTest" />
			<test name="koopa.core.grammars.test.BinaryGrammarTest" />

			<test name="koopa.core.parsers.combinators.test.BalancingTest" />

			<test name="koopa.core.grammars.fluent.test.FluentGrammarTest" />

			<test name="koopa.core.trees.test.ProgramTextTest" />
			<test name="koopa.core.trees.test.TreeIteratorsTest" />
			<test name="koopa.core.trees.test.TreePositionsTest" />
			<test name="koopa.core.trees.test.TreeWalkerTest" />
			<test name="koopa.core.trees.test.XMLSerializerTest" />

			<test name="koopa.core.sources.test.CoreSourcesValidationTest" />
			<test name="koopa.core.sources.test.TestTokenizerTest" />

			<test name="koopa.core.trees.jaxen.test.JaxenTest" />

			<test name="koopa.core.util.test.TabStopsTest" />
		</junit>
	</target>

	<!-- Koopa Templates DSL -->

	<target name="templates">
		<echo>Compiling Koopa Templates DSL...</echo>
		<javac srcdir="src/templates/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- Koopa Domain Specific Languages -->

	<target name="dsl" depends="core,templates">
		<echo>Compiling Koopa Grammar DSL...</echo>
		<javac srcdir="src/dsl/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/dsl/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- Koopa Domain Specific Languages TESTS -->

	<target name="dsl-tests" depends="core,core-tests,dsl">
		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/dsl/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/dsl/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-dsl-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.dsl.stage.grammar.test.StageGrammarTests" />
			<test name="koopa.dsl.kg.grammar.test.KGGrammarTests" />
		</junit>
	</target>

	<!-- CICS -->

	<target name="cics" depends="core,dsl">
		<echo>Generating parsers...</echo>
		<kgg path="src/cics/" />

		<echo>Compiling parsers...</echo>
		<javac srcdir="src/cics/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional grammar resources...</echo>
		<copy todir="build/">
			<fileset dir="src/cics/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- CICS PARSER TESTS -->

	<target name="cics-tests" depends="core,core-tests,cics">
		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/cics/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/cics/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-cics-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cics.grammar.test.EmbeddedCICSGrammarTests" />
		</junit>
	</target>

	<!-- SQL -->

	<target name="sql" depends="core,dsl">
		<echo>Generating parsers...</echo>
		<kgg path="src/sql/" />

		<echo>Compiling parsers...</echo>
		<javac srcdir="src/sql/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional grammar resources...</echo>
		<copy todir="build/">
			<fileset dir="src/sql/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- SQL PARSER TESTS -->

	<target name="sql-tests" depends="core,core-tests,sql">
		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/sql/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/sql/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-sql-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.sql.grammar.test.EmbeddedSQLGrammarTests" />
		</junit>
	</target>

	<!-- COBOL PARSER -->

	<target name="cobol" depends="core,dsl,cics">
		<echo>Generating parsers...</echo>
		<kgg path="src/cobol/" />

		<echo>Compiling parsers...</echo>
		<javac srcdir="src/cobol/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional grammar resources...</echo>
		<copy todir="build/">
			<fileset dir="src/cobol/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- COBOL PARSER TESTS -->

	<target name="cobol-tests" depends="core,core-tests,cobol">
		<echo>Compiling unit tests...</echo>
		<javac srcdir="test/cobol/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="test/cobol/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<target name="run-cobol-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cobol.grammar.directives.test.FixedDirectivesTests" />
			<test name="koopa.cobol.grammar.directives.test.FreeDirectivesTests" />
			<test name="koopa.cobol.sources.test.CobolSourcesValidationTest" />
			<test name="koopa.cobol.grammar.preprocessing.test.CobolPreprocessingGrammarTests" />
			<test name="koopa.cobol.grammar.test.CobolGrammarTests" />
			<test name="koopa.cobol.parser.preprocessing.replacing.test.ReplacingPhraseOperandTest" />
			<test name="koopa.cobol.parser.preprocessing.test.PreprocessingSourceTest" />
		</junit>
	</target>

	<target name="random-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<sysproperty key="koopa.tests.random" value="true" />
			<sysproperty key="koopa.tests.random.limit" value="3" />

			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cobol.grammar.test.CobolGrammarTests" />
			<test name="koopa.sql.grammar.test.EmbeddedSQLGrammarTests" />
			<test name="koopa.cics.grammar.test.EmbeddedCICSGrammarTests" />
		</junit>
	</target>

	<target name="run-cobol-regression-tests">
		<junit fork="yes" printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement location="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<assertions>
				<enable />
			</assertions>

			<formatter type="brief" usefile="no" />

			<test name="koopa.cobol.parser.test.Cobol85RegressionTest" />
			<test name="koopa.cobol.parser.preprocessing.test.Cobol85PreprocessingTest" />
		</junit>
	</target>

	<!-- APPLICATIONS -->

	<target name="apps" depends="core,dsl,cobol">
		<echo>Generating the parsers...</echo>
		<kgg path="src/apps/" />

		<echo>Compiling processing classes...</echo>
		<javac srcdir="src/apps/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="src/apps/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- EXAMPLES -->

	<target name="examples" depends="core,dsl,cobol">
		<echo>Generating the parsers...</echo>
		<kgg path="examples/" />

		<echo>Compiling example classes...</echo>
		<javac srcdir="examples/basic/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<javac srcdir="examples/jaxen/" destdir="build/" debug="on" source="${koopa.java.version}" target="${koopa.java.version}" bootclasspath="${koopa.java.boot.classpath}" includeantruntime="false">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>

		<echo>Copying additional resources...</echo>
		<copy todir="build/">
			<fileset dir="examples/basic/" excludes="**/*.java,**/*.g" />
			<fileset dir="examples/jaxen/" excludes="**/*.java,**/*.g" />
		</copy>
	</target>

	<!-- PACKAGE -->

	<target name="dist" depends="revision-number">
		<jar destfile="koopa-${koopa.revision}.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="koopa.app.Koopa" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="build" />
			<zipfileset excludes="META-INF/*.SF" src="lib/swingx-1.0.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/jaxen-1.1.1.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-1.2-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-core-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/opencsv-2.3.jar" />
		</jar>
	</target>

	<target name="dist-lite" depends="revision-number">
		<jar destfile="koopa-${koopa.revision}-lite.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="koopa.app.cli.ToXml" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="build">
				<exclude name="koopa/app/" />
			</fileset>
			<fileset dir="build">
				<include name="koopa/app/cli/" />
			</fileset>
			<zipfileset excludes="META-INF/*.SF" src="lib/jaxen-1.1.1.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-1.2-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-core-2.24.3.jar" />
		</jar>
	</target>

	<target name="jar">
		<jar destfile="koopa.jar" filesetmanifest="mergewithoutmain">
			<manifest>
				<attribute name="Main-Class" value="koopa.app.Koopa" />
				<attribute name="Class-Path" value="." />
			</manifest>
			<fileset dir="build" />
			<zipfileset excludes="META-INF/*.SF" src="lib/swingx-1.0.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/jaxen-1.1.1.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-1.2-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-api-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/log4j-core-2.24.3.jar" />
			<zipfileset excludes="META-INF/*.SF" src="lib/opencsv-2.3.jar" />
		</jar>
	</target>

	<!-- SVN -->

	<target name="revision-number" depends="core-build">
		<echo file="build/REVISION" message="${koopa.revision}" />
	</target>

	<!-- CLASS VERSION CHECK -->

	<target name="report-java-version">
		<java classname="koopa.core.util.ClassVersionChecker" fork="true">
			<jvmarg value="-ea" />
			<arg value="@{path}" />
			<classpath>
				<pathelement path="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>

	<!-- JAVADOC -->

	<target name="javadoc">

		<delete dir="doc/javadoc/" />
		<javadoc destdir="doc/javadoc/" windowtitle="Koopa Cobol Parser">

			<fileset dir="src/" />
			<fileset dir="test/" />

			<classpath>
				<pathelement path="build/" />
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
				<pathelement path="${java.class.path}" />
			</classpath>
		</javadoc>
	</target>

	<!-- MACROS -->

	<macrodef name="kgg">
		<attribute name="path" />
		<sequential>
			<java classname="koopa.dsl.kg.KGG" fork="true">
				<jvmarg value="-ea" />
				<arg value="@{path}" />
				<classpath>
					<pathelement path="build/" />
					<fileset dir="lib">
						<include name="*.jar" />
					</fileset>
					<pathelement path="${java.class.path}" />
				</classpath>
			</java>
		</sequential>
	</macrodef>
</project>
